import Array;
import flixel.FlxG;
import funkin.audio.FunkinSound;
import funkin.audio.VoicesGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.PolymodErrorHandler;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.play.GameOverSubState;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.ui.MusicBeatSubState;
import funkin.ui.options.OptionsState;
import funkin.ui.options.PreferencesMenu;
import funkin.util.Constants;
import String;

/**
 * This is a Module that's essentially the "core"
 * of Funker Selector.
 *
 * It handles character replacement, the freeplay icon, and preferences.
 * Save data and character data are handled by the `FS_SaveDataHandler` and `FS_CharacterDataHandler` modules respectively.
 *
 * Modules are loaded in the following order:
 * 1. `FS_SaveDataMigrator`
 * 2. `FS_CharacterDataHandler` and `FS_SaveDataHandler`
 * 3. `FS_FreeplayDJReplace` and `FS_ResultsHandler`
 * 4. `FS_CoreModule`
 * 5. `FS_SubStateIconHandler`
 *
 * The core module is loaded last to ensure that all the other modules can be accessed properly.
 * NOTE: `FS_FreeplayIcon` and `FS_CharacterMenu` are accessed on demand, so they don't need to be loaded in a specific order.
 */
class FS_CoreModule extends Module
{
  /**
   * The current voice list, used for vocal replacement.
   */
  var voiceList:Array<String>;

  /**
   * Check the game version, initialize save data, and build the JSON character cache.
   */
  function new()
  {
    super('FS_CoreModule', 1000);

    if (Constants.DEBUG_BUILD)
    {
      trace("[Funker Selector] Game is a debug build.");
    }
    else
    {
      trace("[Funker Selector] Game is a release build.");
    }
  }

  /**
   * The actual logic for character replacement.
   * For Boyfriend and Dad, it checks to see if a vocal
   * file of the current song exists for the specified character,
   * and replaces the original character's vocals with that.
   *
   * @param characterID The character ID to change into.
   * @param characterType The character type we're using.
   *
   */
  function replaceCharacter(characterID:String = 'bf', characterType:CharacterType = null):Void
  {
    var fs_characterData:Dynamic = ModuleHandler.getModule('FS_CharacterDataHandler').scriptCall('getCharacterData', [characterID]);
    var oldChar:BaseCharacter = null;
    var voiceID:String = fs_characterData?.voiceID ?? characterID;
    var variationSuffix:String = PlayState.instance.currentVariation != 'default' ? '-' + PlayState.instance.currentVariation : '';
    var voiceFile:String = Paths.voices(PlayState.instance.currentSong.id, '-' + voiceID + variationSuffix);

    if (characterID == 'default') return;

    trace('[Funker Selector] Replacing type ' + characterType + ' with id ' + characterID);

    switch (characterType)
    {
      case CharacterType.BF:
        oldChar = PlayState.instance.currentStage.getBoyfriend();
        if (Assets.exists(voiceFile))
        {
          voiceList[0] = voiceFile;
        }
      case CharacterType.GF:
        oldChar = PlayState.instance.currentStage.getGirlfriend();
      case CharacterType.DAD:
        oldChar = PlayState.instance.currentStage.getDad();
        if (Assets.exists(voiceFile))
        {
          voiceList[1] = voiceFile;
        }
      default:
        trace('How did you get here?');
        return;
    }

    // Return if the target character does not exist.
    if (oldChar == null) return;

    if (fs_characterData.characterVariations.length > 0)
    {
      for (variation in fs_characterData.characterVariations)
      {
        if (variation.songID == null || variation.characterID == null)
        {
          continue;
        }

        var songMatch:Bool = false;
        var variationMatch:Bool = false;

        if (variation.songID is Array)
        {
          songMatch = (variation.songID.contains(PlayState.instance.currentSong.id));
        }
        else if (variation.songID is String)
        {
          songMatch = (variation.songID == PlayState.instance.currentSong.id);
        }

        if (variation.songVariation != null)
        {
          if (variation.songVariation is Array)
          {
            variationMatch = (variation.songVariation.contains(PlayState.instance.currentVariation));
          }
          else if (variation.songVariation is String)
          {
            variationMatch = (variation.songVariation == PlayState.instance.currentVariation);
          }
        }
        else
        {
          variationMatch = true; // Assume true if `songVariation` does not exist.
        }

        if (songMatch && variationMatch)
        {
          fs_characterData = ModuleHandler.getModule('FS_CharacterDataHandler').scriptCall('getCharacterData', [variation.characterID]) ?? fs_characterData;

          if (ModuleHandler.getModule('FS_CharacterDataHandler').scriptCall('charJSONCheck', [variation.characterID]))
          {
            trace('[Funker Selector] Variation found: ' + variation.characterID);
            characterID = variation.characterID;
          }
          else
          {
            PolymodErrorHandler.showAlert('Funker Selector Error',
              'The character variation "' + variation.characterID + '" does not exist. The base character ID will be used instead.');
          }
          break;
        }
      }
    }

    // Don't bother replacing the character if both character IDs match.
    if (oldChar.characterId != characterID)
    {
      var charZIndex:Int = oldChar.zIndex;
      var character = CharacterDataParser.fetchCharacter(characterID);

      if (character != null)
      {
        oldChar.destroy();
        character.zIndex = charZIndex;
        PlayState.instance.currentStage.addCharacter(character, characterType);

        // fix for pixel pico and nene
        // really dont wanna do this but i have no other choice lol
        // TODO: pr a fix to funkin.assets or something idk
        if (PlayState.instance.currentStageId != 'schoolPico')
        {
          switch (characterID)
          {
            case 'nene-pixel':
              character.x -= 22;
              character.y -= PlayState.instance.currentStageId != 'schoolErect' ? 203 : 153;
              character.originalPosition.set(character.x, character.y);
              if (PlayState.instance.currentStageId == 'schoolErect') character.scriptCall('addSunsetShaders');
            case 'pico-pixel':
              character.x -= -90;
              character.y -= -18;
              character.cameraFocusPoint.x -= 50;
              character.cameraFocusPoint.y += 10;
              character.originalPosition.set(character.x, character.y);
          }
        }
      }
      else
      {
        PolymodErrorHandler.showAlert('Funker Selector Error', 'Something went wrong replacing the ' + characterType + ' character. How the fuck???');
      }
    }
    else
    {
      trace('[Funker Selector] ID ' + characterID + ' and ID ' + oldChar.characterId + ' match. Not replacing...');
    }

    if (characterType == CharacterType.BF)
    {
      PauseSubState.musicSuffix = fs_characterData?.suffixes?.pauseMusic ?? PauseSubState.musicSuffix;
      GameOverSubState.musicSuffix = fs_characterData?.suffixes?.gameOverMusic ?? GameOverSubState.musicSuffix;
      GameOverSubState.blueBallSuffix = fs_characterData?.suffixes?.blueBall ?? GameOverSubState.blueBallSuffix;
    }

    trace('[Funker Selector] Suffixes\n\nPause Music: ' + PauseSubState.musicSuffix + '\nGame Over Music: ' + GameOverSubState.musicSuffix
      + '\nGame Over SFX: ' + GameOverSubState.blueBallSuffix);
  }

  /**
   * Modified version of buildVocals(); to handle vocal replacement.
   *
   * @param voiceList The supplied array.
   */
  function replaceVocals(voiceList:Array<String>):VoicesGroup
  {
    var currentChart = PlayState.instance.currentChart;
    var result:VoicesGroup = new VoicesGroup();
    var songVoices:Array<String> = currentChart.buildVoiceList();

    result.addPlayerVoice(FunkinSound.load(voiceList[0] ?? songVoices[0]));
    result.addOpponentVoice(FunkinSound.load(voiceList[1] ?? songVoices[1]));

    result.playerVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.player);
    result.opponentVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.opponent);

    return result;
  }

  /**
   * SCRIPT EVENTS
   * These are script events that are triggered by the game.
   * Funker Selector uses these for various things.
   */
  override function onUpdate(event:UpdateScriptEvent):Void
  {
    super.onUpdate(event);

    // DEBUG FEATURES
    // These are functions that are only available
    // on debug builds.

    if (Constants.DEBUG_BUILD)
    {
      // Force reload the JSON cache with F6.
      if (FlxG.keys.justPressed.F6)
      {
        trace("[Funker Selector] Force reloading JSON cache...");
        ModuleHandler.getModule('FS_CharacterDataHandler').scriptCall("loadJSONDataCache");
      }

      // Write the save data to a JSON file.
      if (FlxG.keys.justPressed.F7)
      {
        trace("[Funker Selector] Writing save data to JSON...");
        ModuleHandler.getModule('FS_SaveDataHandler').scriptCall("debug_dumpSave");
      }

      // Load the save data from a JSON file.
      if (FlxG.keys.justPressed.F8)
      {
        trace("[Funker Selector] Loading save data from JSON...");
        ModuleHandler.getModule('FS_SaveDataHandler').scriptCall("debug_loadSaveFromJSON");
      }
    }
  }

  override function onStateChangeBegin(event:StateChangeScriptEvent):Void
  {
    super.onStateChangeBegin(event);
    if (event.targetState is PlayState)
    {
      // Resetting Game Over and Pause Menu suffixes.
      // We put this in `onStateChangeBegin()` instead of `onStateChangeEnd()`, otherwise,
      // scripted characters will have their suffixes overridden!
      PauseSubState.musicSuffix = '';
      GameOverSubState.musicSuffix = '';
      GameOverSubState.blueBallSuffix = '';
    }
  }

  override function onStateChangeEnd(event:StateChangeScriptEvent):Void
  {
    super.onStateChangeEnd(event);
    // Options Menu stuff
    if (event.targetState is OptionsState)
    {
      var saveObject:Dynamic = ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('getSaveData');

      var fs_preferencePage:PreferencesMenu = event.targetState.optionsCodex.addPage('funkerselector', new PreferencesMenu());
      fs_preferencePage.onExit.add(function() {
        FlxG.state.optionsCodex.switchPage('options');
      });

      fs_preferencePage.preferenceDesc = [];
      fs_preferencePage.items.clear();
      fs_preferencePage.preferenceItems.clear();

      var menuItem:TextMenuItem = event.targetState.optionsCodex.pages.get('options')
        .createItem("FUNKER SELECTOR", function() FlxG.state.optionsCodex.switchPage('funkerselector'));
      menuItem.y -= 80;

      fs_preferencePage.createPrefItemCheckbox("Simplify UI", "If enabled, simplifies the UI and disables character sprite caching.", (value) -> {
        saveObject.preferences.potatoMode = value;
        ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('writeSaveData', [saveObject]);
      }, saveObject.preferences.potatoMode);

      fs_preferencePage.createPrefItemEnum('Menu SFX', 'Change the SFX used for the Character Menu.',
        ["Funkin' Main Menu" => "funkin", "Funkin' Character Select" => "charSelect"], (key, value) -> {
          saveObject.preferences.preferredSFX = value;
          ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('writeSaveData', [saveObject]);
          if (value == "charSelect")
          {
            FunkinSound.playOnce(Paths.sound('CS_confirm'));
          }
          else
          {
            FunkinSound.playOnce(Paths.sound('confirmMenu'));
          }
        }, saveObject.preferences.preferredSFX);

      fs_preferencePage.createPrefItemCheckbox("DJ Replacement",
        "If disabled, the Freeplay DJ will not be swapped out for the currently selected character's own DJ.", (value) -> {
          saveObject.preferences.djSwapping = value;
          ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('writeSaveData', [saveObject]);
        }, saveObject.preferences.djSwapping);
    }
  }

  override function onCountdownStart(event:CountdownScriptEvent):Void
  {
    super.onCountdownStart(event);
    if (PlayState.instance?.currentStage == null || PlayState.instance.isMinimalMode || PlayState.instance.isChartingMode) return;

    voiceList = [null, null];

    replaceCharacter(ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('getSaveData').characterIDs.bf, CharacterType.BF);
    replaceCharacter(ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('getSaveData').characterIDs.gf, CharacterType.GF);
    replaceCharacter(ModuleHandler.getModule('FS_SaveDataHandler').scriptCall('getSaveData').characterIDs.dad, CharacterType.DAD);
    PlayState.instance.currentStage.refresh();

    trace('[Funker Selector] Voice List:\n\nPlayer: ' + voiceList[0] + '\nOpponent: ' + voiceList[1]);
    PlayState.instance.vocals.stop();
    PlayState.instance.vocals = replaceVocals(voiceList);
  }
}
