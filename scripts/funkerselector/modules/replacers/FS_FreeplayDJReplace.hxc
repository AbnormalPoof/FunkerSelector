import flixel.FlxG;
import flixel.text.FlxText;
import funkin.data.freeplay.player.PlayerRegistry;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.ui.freeplay.FreeplayDJState;
import funkin.ui.freeplay.FreeplayState;

/**
 * This is a module that handles Freeplay DJ replacement.
 */
class DJReplace extends Module
{
  public var saveData:Dynamic;

  public function new()
  {
    super('FS_FreeplayDJReplace', 300);
  }

  /**
   * Swaps out the Freeplay DJ when the CharacterMenu SubState is closed, if needed.
   * @param event
   */
  override function onScriptEvent(event:ScriptEvent):Void
  {
    super.onScriptEvent(event);

    if (event.type == "FS_EXITED_SUBSTATE" && (FlxG.state.subState is FreeplayState))
    {
      if (FS_SaveData.instance.djSwapping)
      {
        trace("[Funker Selector] Switching out DJ...");
        transitionToNewDJ(FlxG.state.subState, saveData);
      }
      else
      {
        trace("[Funker Selector] Not swapping out DJ...");
      }
    }
  }

  /**
   * Swap out the Freeplay DJ when the Freeplay Menu is opened, if needed.
   * @param event
   */
  override function onSubStateOpenEnd(event)
  {
    super.onSubStateOpenEnd(event);
    if (event.targetState is FreeplayState)
    {
      if (FS_SaveData.instance.djSwapping)
      {
        trace("[Funker Selector] Switching out DJ...");
        transitionToNewDJ(FlxG.state.subState, true);
      }
    }
  }

  /**
   * Swap out the Freeplay DJ.
   * @param freeplay The Freeplay SubState we're using.
   */
  function transitionToNewDJ(freeplay:FreeplayState, ?inIntro:Bool = false):Void
  {
    var freeplayDJ:FreeplayDJ = freeplay.dj;
    var playableCharData:PlayerFreeplayDJData = freeplayDJ.playableCharData;
    var characterID:String = PlayerRegistry.instance.isCharacterOwned(FS_SaveData.instance.bf) ? FS_SaveData.instance.bf : freeplay.currentCharacterId;
    var playableCharId:String = PlayerRegistry.instance.getCharacterOwnerId(characterID) ?? characterID;

    if (freeplayDJ.characterId != playableCharId)
    {
      if (!inIntro)
      {
        if (freeplayDJ.hasAnimation(playableCharData.getAnimationPrefix('charSelect')))
        {
          freeplay.busy = true;
          freeplayDJ.onIntroDone.removeAll();
          freeplayDJ.onAnimationComplete.addOnce(replaceDJNoIntro);
          freeplayDJ.currentState = FreeplayDJState.CharSelect;
          var animPrefix = playableCharData.getAnimationPrefix('charSelect');
          freeplayDJ.playFlashAnimation(animPrefix, true, false, false);
        }
      }
      else
      {
        replaceDJIntro();
      }
    }
    else
    {
      trace("[Funker Selector] DJ Character IDs match! Not replacing.");
    }
  }

  /**
   * Replaces the Freeplay DJ. Plays the DJ's intro animation when done.
   */
  function replaceDJNoIntro():Void
  {
    var freeplayDJ:FreeplayDJ = FlxG.state.subState.dj;
    var characterID:String = PlayerRegistry.instance.isCharacterOwned(FS_SaveData.instance.bf) ? PlayerRegistry.instance.getCharacterOwnerId(FS_SaveData.instance.bf) : FlxG.state.subState.currentCharacterId;
    var playableChar:PlayableCharacter = PlayerRegistry.instance.fetchEntry(characterID);
    var playableCharData:Dynamic = playableChar?.getFreeplayDJData() ?? null;

    var fs_characterData:Dynamic = FS_CharacterDataHandler.instance.getCharacterData(FS_SaveData.instance.bf);
    var introFrame:Int = fs_characterData.introSwapFrame;

    if (playableCharData == null)
    {
      trace('[WARNING] Tried to replace Freeplay DJ with invalid data.');
      trace(characterID);
      return;
    }

    if (freeplayDJ.anim.curSymbol.name == freeplayDJ.playableCharData.getAnimationPrefix('charSelect'))
    {
      trace("[Funker Selector] Loading texture atlas: " + playableCharData.getAtlasPath());
      freeplayDJ.loadAtlas(playableCharData.getAtlasPath());
      freeplayDJ.characterId = characterID;
      freeplayDJ.playableCharData = playableCharData;

      var animPrefix = playableCharData.getAnimationPrefix('intro');
      freeplayDJ.playFlashAnimation(animPrefix, true, false, false, introFrame);

      if (FlxG.state.subState.backingCard.funnyScroll != null) reapplyBackingText(FlxG.state.subState, [
        playableChar.getFreeplayDJText(1),
        playableChar.getFreeplayDJText(2),
        playableChar.getFreeplayDJText(3)
      ]);
      FlxG.state.subState.busy = false;
    }
  }

  /**
   * A modified version of `replaceDJNoIntro()` that replaces the DJ quicker.
   * This is used when *entering* Freeplay.
   */
  function replaceDJIntro():Void
  {
    var freeplayDJ:FreeplayDJ = FlxG.state.subState.dj;
    var characterID:String = PlayerRegistry.instance.isCharacterOwned(FS_SaveData.instance.bf) ? PlayerRegistry.instance.getCharacterOwnerId(FS_SaveData.instance.bf) : FlxG.state.subState.currentCharacterId;
    var playableChar:PlayableCharacter = PlayerRegistry.instance.fetchEntry(characterID);
    var playableCharData:Dynamic = playableChar.getFreeplayDJData() ?? null;

    if (playableCharData == null)
    {
      trace('[WARNING] Tried to replace Freeplay DJ with invalid data.');
      trace(characterID);
      return;
    }

    trace("[Funker Selector] Loading texture atlas: " + playableCharData.getAtlasPath());
    freeplayDJ.loadAtlas(playableCharData.getAtlasPath());
    freeplayDJ.characterId = characterID;
    freeplayDJ.playableCharData = playableCharData;

    if (FlxG.state.subState.backingCard.currentCharacter == "bf") reapplyBackingText(FlxG.state.subState, [
      playableChar.getFreeplayDJText(1),
      playableChar.getFreeplayDJText(2),
      playableChar.getFreeplayDJText(3)
    ]);
  }

  /**
   * Replaces the backing text.
   * @param freeplay The Freeplay SubState we're using.
   * @param text1 The 1st string.
   * @param text2 The 2nd string.
   * @param text3 The 3rd string.
   */
  function reapplyBackingText(freeplay:FreeplayState, textArray:Array<String>):Void
  {
    trace("[Funker Selector] Applying backing text...");
    trace(textArray[0]);
    trace(textArray[1]);
    trace(textArray[2]);

    var funnyScrollArray:Array<Dynamic> = [
      freeplay.backingCard.funnyScroll,
      freeplay.backingCard.funnyScroll2,
      freeplay.backingCard.funnyScroll3
    ];
    var moreWaysArray:Array<Dynamic> = [freeplay.backingCard.moreWays, freeplay.backingCard.moreWays2];
    for (scrollText in funnyScrollArray)
    {
      trace("[Funker Selector] Setting up text group with text " + textArray[0]);
      setupTextGroup(scrollText, 60, FlxG.width / 2, textArray[0], -3.8, false);
    }

    for (scrollText in moreWaysArray)
    {
      trace("[Funker Selector] Setting up text group with text " + textArray[1]);
      setupTextGroup(scrollText, 43, FlxG.width, textArray[1], 6.8, true);
    }

    trace("[Funker Selector] Setting up text group with text " + textArray[2]);
    setupTextGroup(freeplay.backingCard.txtNuts, 43, FlxG.width / 2, textArray[2], 3.5, true);

    freeplay.backingCard.funnyScroll.funnyColor = 0xFFFF9963;
    freeplay.backingCard.funnyScroll2.funnyColor = 0xFFFF9963;
    freeplay.backingCard.funnyScroll3.funnyColor = 0xFFFEA400;
    freeplay.backingCard.moreWays.funnyColor = 0xFFFFF383;
    freeplay.backingCard.moreWays2.funnyColor = 0xFFFFF383;
  }

  /**
   * Sets up `grpTexts` for a `BGScrollingText` object
   * @param textObject The object we are using
   * @param size The text size
   * @param widthShit The width or something IDK
   * @param text The text itself
   * @param speed The speed of the text scrolling
   * @param bold Wether or not the text is bold
   */
  function setupTextGroup(textObject:Dynamic, size:Int = 10, widthShit:Int = 1, text:String = "FUCK", speed:Float = 1.0, bold:Bool = false):Void
  {
    textObject.grpTexts.clear();
    var testText:FlxText = new FlxText(0, 0, 0, text, size);
    testText.font = "5by7";
    testText.bold = bold;
    testText.updateHitbox();
    textObject.grpTexts.add(testText);

    var needed:Int = Math.ceil(widthShit / testText.frameWidth) + 1;

    for (i in 0...needed)
    {
      var lmfao:Int = i + 1;

      var coolText:FlxText = new FlxText((lmfao * testText.frameWidth) + (lmfao * 20), 0, 0, text, size);

      coolText.font = "5by7";
      coolText.bold = bold;
      coolText.updateHitbox();
      trace("[Funker Selector] Adding to text group: " + coolText.text);
      textObject.grpTexts.add(coolText);
    }

    textObject.speed = speed;
  }
}
