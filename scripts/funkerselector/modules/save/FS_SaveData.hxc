import funkin.modding.base.Object;
import flixel.FlxG;
import funkin.save.Save;

/**
 * A class that hold various save data values for easy access.
 */
class FS_SaveData extends Object
{
  /**
   * The instance of this class.
   */
  static var instance:FS_SaveData = null;

  /**
   * CHARACTER IDS
   */
  /**
   * The saved BF character ID.
   */
  public var bf(get, set):String;

  function get_bf():String
  {
    return FS_SaveDataHandler.instance.getSaveData().characterIDs.bf;
  }

  function set_bf(value:String):Void
  {
    trace("[Funker Selector] Saving BF character ID...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.characterIDs.bf = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * The saved GF character ID.
   */
  public var gf(get, set):String;

  function get_gf():String
  {
    return FS_SaveDataHandler.instance.getSaveData().characterIDs.gf;
  }

  function set_gf(value:String):Void
  {
    trace("[Funker Selector] Saving GF character ID...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.characterIDs.gf = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * The saved DAD character ID.
   */
  public var dad(get, set):String;

  function get_dad():String
  {
    return FS_SaveDataHandler.instance.getSaveData().characterIDs.dad;
  }

  function set_dad(value:String):Void
  {
    trace("[Funker Selector] Saving DAD character ID...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.characterIDs.dad = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * PREFERENCES
   */
  /**
   * If enabled, simplifies the UI to use health icons in place of character sprites
   */
  public var simplifyUI(get, set):Bool;

  function get_simplifyUI():String
  {
    return FS_SaveDataHandler.instance.getSaveData().preferences.potatoMode;
  }

  function set_simplifyUI(value:String):Void
  {
    trace("[Funker Selector] Saving Simplify UI preference...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.preferences.potatoMode = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * The preferred SFX for the Character Menu.
   */
  public var preferredSFX(get, set):String;

  function get_preferredSFX():String
  {
    return FS_SaveDataHandler.instance.getSaveData().preferences.preferredSFX;
  }

  function set_preferredSFX(value:String):Void
  {
    trace("[Funker Selector] Saving Preferred SFX preference...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.preferences.preferredSFX = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * If disabled, the Freeplay DJ will not be swapped out for the currently selected character's own DJ.
   */
  public var djSwapping(get, set):Bool;

  function get_djSwapping():String
  {
    return FS_SaveDataHandler.instance.getSaveData().preferences.djSwapping;
  }

  function set_djSwapping(value:String):Void
  {
    trace("[Funker Selector] Saving DJ Swapping preference...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.preferences.djSwapping = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * The seen unlock animations for this save data.
   */
  public var seenUnlocks(get, set):Array<String>;

  function get_seenUnlocks():String
  {
    return FS_SaveDataHandler.instance.getSaveData().seenUnlocks;
  }

  function set_seenUnlocks(value:String):Void
  {
    trace("[Funker Selector] Saving seen unlocks...");
    var saveData:String = FS_SaveDataHandler.instance.getSaveData();
    saveData.seenUnlocks = value;
    FS_SaveDataHandler.instance.writeSaveData(saveData);
  }

  /**
   * The saved BF character ID.
   */
  public function new()
  {
    super();
  }

  static function initialize():Void
  {
    FS_SaveData.instance = new FS_SaveData();
  }
}
