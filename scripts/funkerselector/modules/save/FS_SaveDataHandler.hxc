import funkin.modding.base.Object;
import funkin.save.Save;
import funkin.util.FileUtil;
import funkin.util.FileWriteMode;
import funkin.util.PlatformUtil;
import funkin.util.SerializerUtil;
import haxe.ds.StringMap;
import thx.Maps;
import thx.Objects;

/**
 * A class to handle the save data for Funker Selector.
 */
class FS_SaveDataHandler extends Object
{
  /**
   * The version for save data.
   */
  static final FS_SAVE_DATA_VERSION:String = "1.1.0";

  /**
   * The instance of the save data handler.
   */
  static var instance:FS_SaveDataHandler = null;

  public function new()
  {
    super();
  }

  static function initialize(?reset:Bool = false):Void
  {
    if (FS_SaveDataHandler.instance == null || reset)
    {
      trace("[Funker Selector] Creating a new save data handler instance...");
      FS_SaveDataHandler.instance = new FS_SaveDataHandler();
    }
    else
    {
      trace("[Funker Selector] An instance of the save data handler already exists!");
    }

    if (FS_SaveDataMigrator.instance == null || reset)
    {
      trace("[Funker Selector] Creating a new save data handler instance...");
      FS_SaveDataMigrator.instance = new FS_SaveDataMigrator();
    }
    else
    {
      trace("[Funker Selector] An instance of the save data handler already exists!");
    }

    FS_SaveData.initialize();
    FS_SaveDataHandler.instance.initializeSaveData(reset);
  }

  /**
   * Retrieves the Funker Selector save data.
   * @return The saved data as a dynamic object.
   */
  function initializeSaveData(resetSave:Bool = false):Void
  {
    if (!Save.instance.modOptions.exists("FunkerSelector") || resetSave)
    {
      Save.instance.modOptions.set("FunkerSelector", getDefaultSaveData());
      Save.instance.flush();

      trace('[Funker Selector] Successfully created save data:\n\n---Character IDs---\n\nBoyfriend: '
        + FS_SaveData.instance.bf
        + '\nGirlfriend: '
        + FS_SaveData.instance.gf
        + '\nOpponent: '
        + FS_SaveData.instance.dad
        + '\n\n---Settings---\n\nSimplify UI: '
        + FS_SaveData.instance.simplifyUI
        + '\nPreferred SFX: '
        + FS_SaveData.instance.preferredSFX
        + '\nDJ Replacement: '
        + FS_SaveData.instance.djSwapping
        + '\n\n---Seen Unlock Animations---\n\n'
        + FS_SaveData.instance.seenUnlocks);
    }
    else
    {
      var saveData:Dynamic = FS_SaveDataMigrator.instance.checkSaveData(getSaveData());

      Save.instance.modOptions.set("FunkerSelector", FS_SaveDataMigrator.instance.checkSaveData(getSaveData()));
      Save.instance.flush();

      trace('[Funker Selector] Successfully validated save data:\n\n---Character IDs---\n\nBoyfriend: '
        + FS_SaveData.instance.bf
        + '\nGirlfriend: '
        + FS_SaveData.instance.gf
        + '\nOpponent: '
        + FS_SaveData.instance.dad
        + '\n\n---Settings---\n\nSimplify UI: '
        + FS_SaveData.instance.simplifyUI
        + '\nPreferred SFX: '
        + FS_SaveData.instance.preferredSFX
        + '\nDJ Replacement: '
        + FS_SaveData.instance.djSwapping
        + '\n\n---Seen Unlock Animations---\n\n'
        + FS_SaveData.instance.seenUnlocks);
    }
  }

  /**
   * Returns the default save data.
   */
  static function getDefaultSaveData():FS_saveData
  {
    return {
      version: FS_SAVE_DATA_VERSION,
      characterIDs:
        {
          bf: 'default',
          gf: 'default',
          dad: 'default'
        },
      preferences:
        {
          potatoMode: false,
          preferredSFX: "funkin",
          djSwapping: true
        },
      seenUnlocks: []
    };
  }

  /**
   * DEBUG: Resets all save data.
   * Useful if it gets corrupt.
   */
  function debug_resetSave():Void
  {
    FS_SaveDataHandler.initialize(true);
  }

  /**
   * DEBUG: Writes Funker Selector save data to a JSON file.
   */
  function debug_dumpSave():Void
  {
    var fileString:String = PlatformUtil.isMacOS() ? "../../../../../../../" : "../../../../";
    var filePath:String = fileString + "example_mods/[V-Slice] Funker Selector/data/FS_dumpedSave.json";

    FileUtil.writeStringToPath(filePath, SerializerUtil.toJSON(getSaveData(), true), FileWriteMode.Force);

    trace("[Funker Selector] DEBUG: Wrote save data to " + filePath);
  }

  /**
   * DEBUG: Loads save data from a JSON file.
   */
  function debug_loadSaveFromJSON():Void
  {
    if (!Assets.exists(Paths.json("FS_dumpedSave")))
    {
      trace("[Funker Selector] DEBUG: No JSON save data found!");
      return;
    }

    var parsedData:Dynamic = SerializerUtil.fromJSON(Assets.getText(Paths.json("FS_dumpedSave")));

    var saveObject:Dynamic =
      {
        version: FS_SAVE_DATA_VERSION,
        characterIDs:
          {
            bf: parsedData.characterIDs.bf ?? 'default',
            gf: parsedData.characterIDs.gf ?? 'default',
            dad: parsedData.characterIDs.dad ?? 'default'
          },
        preferences: parsedData.preferences ?? {},
        seenUnlocks: parsedData.seenUnlocks ?? []
      };

    writeSaveData(saveObject);

    trace('[Funker Selector] DEBUG: Loaded save data from JSON:\n\n---Character IDs---\n\nBoyfriend: '
      + saveData.characterIDs.bf
      + '\nGirlfriend: '
      + saveData.characterIDs.gf
      + '\nOpponent: '
      + saveData.characterIDs.dad
      + '\n\n---Settings---\n\nSimplify UI: '
      + saveData.preferences.potatoMode
      + '\nPreferred SFX: '
      + saveData.preferences.preferredSFX
      + '\nDJ Replacement: '
      + saveData.preferences.djSwapping
      + '\n\n---Seen Unlock Animations---\n\n'
      + saveData.seenUnlocks);
  }

  function getSaveData():Dynamic
  {
    return Save.instance.modOptions.get("FunkerSelector");
  }

  /**
   * Write save data to disk.
   */
  function writeSaveData(saveData:Dynamic):Void
  {
    Save.instance.modOptions.set("FunkerSelector", saveData);
    Save.instance.flush();
  }
}
