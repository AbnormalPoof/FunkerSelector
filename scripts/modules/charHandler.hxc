import funkin.modding.module.Module;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.AtlasText;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.ui.options.OptionsState;
import funkin.play.PauseSubState;
import funkin.play.GameOverSubState;
import funkin.Paths;
import flixel.FlxG;
import flixel.util.FlxSave;
import funkin.util.assets.DataAssets;
import openfl.display3D.textures.RectangleTexture;
import openfl.display.BitmapData;
import flixel.graphics.FlxGraphic;
import openfl.display3D.textures.TextureBase;
import openfl.utils.Assets;
import funkin.audio.VoicesGroup;
import funkin.audio.FunkinSound;
import funkin.util.MemoryUtil;
import haxe.ds.StringMap;
import funkin.save.Save;
import haxe.Json;
import haxe.Exception;
import Std;

/**
 * Module that handles the Character Select button in
 * Freeplay, along with character replacement.
 */
class CharacterHandler extends Module
{
	var charText:AtlasText;
	var charSelectIcon:FunkinSprite;

	var characterIDs:Dynamic = {
		bf: 'default',
		gf: 'default',
		dad: 'default'
	}
	var funkerSettings:Dynamic = {
		potatoMode: false,
		preloadSprites: true
	}
	var voiceList:Array<String>;

	/**
	 * currentCachedTextures gets cleared everytime we load into a song.
	 * It'd be annoying to have to re-cache everything everytime we exit!
	 */
	var cachedJSONSparrows:StringMap = new StringMap();

	function new() {
		super("CharacterHandler");
		save = new FlxSave();

		// Initializing Funker Selector's save data if it's not found.
		if (Save.instance.modOptions.get("FunkerSelector") == null) {
				Save.instance.modOptions.set("FunkerSelector", characterIDs);
				Save.instance.flush();
		} else {
				characterIDs = Save.instance.modOptions.get("FunkerSelector");
		}

		if (Save.instance.modOptions.get("FunkerSelectorSettings") == null) {
			Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
			Save.instance.flush();
		} else {
				funkerSettings = Save.instance.modOptions.get("FunkerSelectorSettings");
		}

		// Backwards compatability with the old save system.
		if (save.bind("characterselect", "kagaminerinlen")) {
			if (save.data.characterselect != null) {
				characterIDs.bf = save.data.characterselect;
				save.data.characterselect = null;
				save.flush();
				Save.instance.modOptions.set("FunkerSelector", characterIDs);
				Save.instance.flush();
			}
		}
		if (!funkerSettings.potatoMode) {
			if (funkerSettings.preloadSprites)
				cacheJSONSparrows();
		}
	}

	function onUpdate(event) {
		super.onUpdate(event);
		if (Std.isOfType(FlxG.state.subState, FreeplayState)) {
			if (charSelectIcon != null && charText != null) {
				charSelectIcon.visible = FlxG.state.subState.alsoOrangeLOL.visible;
				charText.visible = FlxG.state.subState.alsoOrangeLOL.visible;
			}
			// Open the CharacterMenu substate.
			// We need to make a new one everytime since it gets destroyed when it's closed.
			if (FlxG.keys.justPressed.G && charText.visible) {
				var charSelect:FlxSubState = ScriptedMusicBeatSubState.init("CharacterSelectSubState");
				charSelect.camera = FlxG.state.subState.funnyCam;
				FlxG.state.subState.persistentUpdate = false;
				FlxG.state.subState.openSubState(charSelect);
			}
		}
	}

	/**
	 * UI stuff for Freeplay.
	 * Sets up the Character Select button.
	 */
	function onSubStateOpenEnd(event) {
		super.onSubStateOpenEnd(event);
		var state = event.targetState;
		if (Std.isOfType(state, FreeplayState)) {
			charSelectIcon = FunkinSprite.createSparrow(10, 120, 'freeplay/char_select');
			charSelectIcon.animation.addByPrefix('intro', 'icon enter', 24, false);
			charSelectIcon.animation.addByPrefix('idle', 'idle', 24, true);
			charSelectIcon.zIndex = 1000;
			charSelectIcon.scale.set(0.7, 0.7);
			charSelectIcon.camera = state.funnyCam;
			charSelectIcon.visible = false;

			charText = new AtlasText(170, 270, 'G', 'bold');
			charText.visible = false;
			charText.zIndex = 1001;
			charText.camera = state.funnyCam;
			state.add(charSelectIcon);
			state.add(charText);

			state.dj.onIntroDone.add(function() {
				charSelectIcon.visible = true;
				charSelectIcon.animation.play('intro');
				charSelectIcon.animation.finishCallback = function(_) {
					charSelectIcon.animation.play('idle');
					charText.visible = true;
					if (charSelectIcon.animation.curAnim.name == 'idle')
							charSelectIcon.offset.set(-15, 14);
					else
							charSelectIcon.offset.set();
				};
			});
		}
	}

	/**
	 * Resetting Game Over and Pause Menu suffixes.
	 * We put this in onStateChangeBegin instead of onStateChangeEnd, otherwise,
	 * scripted characters will have their suffixes overridden!
	 */
	override function onStateChangeBegin(event) {
		super.onStateChangeBegin(event);
		if (Std.isOfType(event.targetState, PlayState)) {
			PauseSubState.musicSuffix = '';
			GameOverSubState.musicSuffix = '';
			GameOverSubState.blueBallSuffix = '';
		}
	}

	override function onStateChangeEnd(event) {
		super.onStateChangeEnd(event);
		// Options Menu stuff
		if (Std.isOfType(event.targetState, OptionsState)) {
			var prefs = event.targetState.pages.get("preferences");
			if (prefs != null) {
				prefs.add(prefs.items.createItem(120, 120 * prefs.items.length + 30, "-- FUNKER SELECTOR --", "bold"));

				prefs.createPrefItemCheckbox("Simplify UI", "Is the new Fancy UI too much for your device? No problem!", (value) -> {
					funkerSettings.potatoMode = value;
					Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
					Save.instance.flush();
				}, funkerSettings.potatoMode);

				prefs.createPrefItemCheckbox("Preload Sprites", "Wether to preload the character sprites or not. Will cause lag on the Character Selection Menu if off!", (value) -> {
					funkerSettings.preloadSprites = value;
					Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
					Save.instance.flush();
					if (value) {
						cacheJSONSparrows();
					} else {
						// Remove the JSON Characters from memory when the user disables the option.
						for (jsonChar in cachedJSONSparrows.keys()) {
							var char = cachedJSONSparrows.get(jsonChar);
							if (char == null) continue;
							FlxG.bitmap.remove(char);
							Assets.cache.removeBitmapData(jsonChar);
							char.persist = false;
							char.destroyOnNoUse = true;
							char.destroy();
							cachedJSONSparrows.remove(jsonChar);
						}
						MemoryUtil.collect(true);
					}
				}, funkerSettings.preloadSprites);

				prefs.add(prefs.items.createItem(120, 120 * prefs.items.length, "-------------------", "bold"));
			}
		}
	}

	/**
	 * Parse a Funker Selector JSON file and return the data.
	 * @param characterID
	 */
	function parseJSONData(characterID:String = 'default'):Void {
		if (Assets.exists(Paths.json('funkerSelector/' + characterID))) {
				var data = Json.parse(Assets.getText(Paths.json('funkerSelector/' + characterID)));
				return data;
		} else {
				return null;
		}
	}

	/**
	 * We preload the sprites for the JSON characters
	 * when the Module is created in order to reduce lag when
	 * they're shown in the Character Selection screen.
	 *
	 * If "Simplify UI" is enabled, the sprites are not
	 * cached as they won't show up in the menu.
	 */
	function cacheJSONSparrows():Void {
		var funkerJSONs = DataAssets.listDataFilesInPath('funkerSelector/');
		var data = null;
		for (funker in funkerJSONs) {
			// Exceptions continue the loop so there's no need for a continue; here.
			try {
					data = Json.parse(Assets.getText(Paths.json('funkerSelector/' + funker)));
			} catch (e:Dynamic) {
					trace(':(');
			}
			
			var charData = CharacterDataParser.parseCharacterData(data.characterID);
			if (data.characterID == null) {
					trace('[ERROR] Failed to cache sprite for ' + Assets.getPath(Paths.json('funkerSelector/' + funker)) + '! The "characterID" field does not exist.');
					continue;
			}
			if (!Assets.exists(Paths.json('characters/' + data.characterID))) {
					trace('[ERROR] Failed to cache sprite! The Character ID (' + data.characterID + ') is invalid.');
					continue;
			}
			if (charData.renderType == 'multisparrow') {
				for (anim in charData.animations) {
						if (anim.assetPath != null) {
								cacheSprite(Paths.image(anim.assetPath));
						}
				}
			} else {
				cacheSprite(Paths.image(charData.assetPath));
			}
		}
	}

	/**
	 * This is taken from Psych Engine, with some modifications.
	 * This is a lot more Memory-efficient compared to using FunkinSprite's cacheSparrow function!
	 *
	 * @param path The file path.
	 */
	function cacheSprite(path:String) {
		if (cachedJSONSparrows.exists(path)) return;
		var bitmap:BitmapData = Assets.getBitmapData(path);
		if (bitmap != null) {
				var texture:RectangleTexture = FlxG.stage.context3D.createRectangleTexture(bitmap.width, bitmap.height, "bgra", true);
				texture.uploadFromBitmapData(bitmap);
				bitmap.image.data = null;
				bitmap.dispose();
				bitmap.disposeImage();
				bitmap = BitmapData.fromTexture(texture);
				var graphic:FlxGraphic = FlxGraphic.fromBitmapData(bitmap, false, path);
				graphic.persist = true;
				cachedJSONSparrows.set(path, graphic);
				trace('[Funker Selector] Successfully cached graphic: ' + path);
		} else {
				trace('[ERROR] Failed to cache graphic: ' + path);
		}
	}

	/**
	 * Reset the voiceList, swap out the characters, and
	 * replace vocals if any are found.
	 */
	override function onCountdownStart(event) {
		super.onCountdownStart(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null || PlayStatePlaylist.isStoryMode || PlayState.instance.isMinimalMode || PlayState.instance.isChartingMode) return;

		// Setting voiceList to null in order to reset the voices,
		// since module variables persist between state changes.
		voiceList = [null, null];

		// Replace and swap out the characters.
		replaceChar(characterIDs.bf, 'bf');
		replaceChar(characterIDs.gf, 'gf');
		replaceChar(characterIDs.dad, 'dad');

		// If at least ONE of them was changed (means a vocal file was found), replace the vocals.
		if (voiceList[0] != null || voiceList[1] != null) {
			PlayState.instance.vocals.stop();
			PlayState.instance.vocals = replaceVocals(voiceList);
		}
	}

	/**
	 * The actual logic for character replacement.
	 * For Boyfriend and Dad, it checks to see if a vocal
	 * file of the current song exists for the specified character,
	 * and replaces the original character's vocals with that.
	 *
	 * @param id The character ID to change into.
	 * @param type The character type we're replacing.
	 */
	function replaceChar(id:String = 'bf', type:String = 'bf'):Void {
		switch (type) {
			case 'bf':
				if (PlayState.instance.currentStage.getBoyfriend() != null) {
					if (characterIDs.bf != 'default') {
						var charZIndex:Int = PlayState.instance.currentStage.getBoyfriend().zIndex;
						var characterData = parseJSONData(id);
						if (characterData != null && characterData.characterVariations != null) {
								for (variation in characterData.characterVariations) {
										if (variation.songID != null && variation.songID == PlayState.instance.currentSong.id) {
												if (variation.characterID != null) {
														var newCharData = parseJSONData(variation.characterID);
														if (newCharData != null) {
																characterData = newCharData;
														}
														id = variation.characterID;
												}
										}
								}
						}
						var character = CharacterDataParser.fetchCharacter(id);
						var suffix:String = (PlayState.instance.currentVariation != null && PlayState.instance.currentVariation != 'default') ? '-' + PlayState.instance.currentVariation : '';
						var voiceFile:String = Paths.voices(PlayState.instance.currentSong.id, '-' + id + suffix);
						if (character != null) {
								PlayState.instance.currentStage.getBoyfriend().destroy();
								character.set_characterType(CharacterType.BF);
								character.initHealthIcon(false);
								character.zIndex = charZIndex;
								PlayState.instance.currentStage.addCharacter(character, CharacterType.BF);
								PlayState.instance.currentStage.refresh();
								if (characterData != null) {
									PauseSubState.musicSuffix = (characterData.pauseMusicSuffix != null && characterData.pauseMusicSuffix != '') ? characterData.pauseMusicSuffix : PauseSubState.musicSuffix;
									GameOverSubState.musicSuffix = (characterData.gameOverMusicSuffix != null && characterData.gameOverMusicSuffix != '') ? characterData.gameOverMusicSuffix : GameOverSubState.musicSuffix;
									GameOverSubState.blueBallSuffix = (characterData.blueBallSuffix != null && characterData.blueBallSuffix != '') ? characterData.blueBallSuffix : GameOverSubState.blueBallSuffix;
								}
						}
						if (Assets.exists(voiceFile)) {
								voiceList[0] = voiceFile;
						}
					}
				}
			case 'gf':
				if (PlayState.instance.currentStage.getGirlfriend() != null) {
					if (characterIDs.gf != 'default') {
						var charZIndex:Int = PlayState.instance.currentStage.getGirlfriend().zIndex;
						var characterData = parseJSONData(id);
						if (characterData != null && characterData.characterVariations != null) {
								for (variation in characterData.characterVariations) {
										if (variation.songID != null && variation.songID == PlayState.instance.currentSong.id) {
												if (variation.characterID != null) {
														id = variation.characterID;
												}
										}
								}
						}
						var character = CharacterDataParser.fetchCharacter(id);
						if (character != null) {
								PlayState.instance.currentStage.getGirlfriend().destroy();
								character.set_characterType(CharacterType.GF);
								character.zIndex = charZIndex;
								PlayState.instance.currentStage.addCharacter(character, CharacterType.GF);
								PlayState.instance.currentStage.refresh();
						}
					}
				}
			case 'dad':
				if (PlayState.instance.currentStage.getDad() != null) {
					if (characterIDs.dad != 'default') {
						var charZIndex:Int = PlayState.instance.currentStage.getDad().zIndex;
						var characterData = parseJSONData(id);
						if (characterData != null && characterData.characterVariations != null) {
								for (variation in characterData.characterVariations) {
										if (variation.songID != null && variation.songID == PlayState.instance.currentSong.id) {
												if (variation.characterID != null) {
														id = variation.characterID;
												}
										}
								}
						}
						var character = CharacterDataParser.fetchCharacter(id);
						var suffix:String = (PlayState.instance.currentVariation != null && PlayState.instance.currentVariation != 'default') ? '-' + PlayState.instance.currentVariation : '';
						var voiceFile:String = Paths.voices(PlayState.instance.currentSong.id, '-' + id + suffix);
						if (character != null) {
								PlayState.instance.currentStage.getDad().destroy();
								character.set_characterType(CharacterType.DAD);
								character.initHealthIcon(true);
								character.zIndex = charZIndex;
								PlayState.instance.currentStage.addCharacter(character, CharacterType.DAD);
								PlayState.instance.currentStage.refresh();
						}
						if (Assets.exists(voiceFile)) {
								voiceList[1] = voiceFile;
						}
					}
				}
			default:
				trace('How did you get here?');
		}
	}

	/**
	 * Modified version of buildVocals(); to handle vocal replacement.
	 *
	 * @param voiceList The supplied array.
	 */
	function replaceVocals(voiceList:Array<String>):VoicesGroup
	{
		var currentChart = PlayState.instance.currentChart;
		var result:VoicesGroup = new VoicesGroup();
		var songVoices:Array<String> = currentChart.buildVoiceList();

		if (voiceList[0] != null) {
			result.addPlayerVoice(FunkinSound.load(voiceList[0]));
		} else {
			result.addPlayerVoice(FunkinSound.load(songVoices[0]));
		}

		if (voiceList[1] != null) {
			result.addOpponentVoice(FunkinSound.load(voiceList[1]));
		} else {
			result.addOpponentVoice(FunkinSound.load(songVoices[1]));
		}

		result.playerVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.player);
		result.opponentVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.opponent);

		return result;
	}
}
