import Array;
import flixel.FlxG;
import flixel.graphics.FlxGraphic;
import funkin.audio.FunkinSound;
import funkin.audio.VoicesGroup;
import funkin.data.freeplay.player.PlayerRegistry;
import funkin.data.song.SongRegistry;
import funkin.graphics.FunkinSprite;
import funkin.modding.PolymodErrorHandler;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.module.Module;
import funkin.play.GameOverSubState;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.ResultState;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.save.Save;
import funkin.ui.AtlasText;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.options.OptionsState;
import funkin.util.Constants;
import funkin.util.MemoryUtil;
import funkin.util.ReflectUtil;
import funkin.util.SerializerUtil;
import funkin.util.VersionUtil;
import funkin.util.assets.DataAssets;
import haxe.Exception;
import haxe.ds.StringMap;
import lime.app.Application;
import openfl.display.BitmapData;
import openfl.display3D.textures.RectangleTexture;
import openfl.display3D.textures.TextureBase;
import Std;
import String;

/**
 * Module that handles the Character Select button in
 * Freeplay, along with character replacement.
 */
class CharacterHandler extends Module {
	/**
	 * The character IDs.
	 * This is retrieved from the save data.
	 */
	public var characterIDs:Dynamic;

	/**
	 * The preferences for Funker Selector specifically.
	 * This is retrieved from the save data.
	 */
	public var funkerSettings:Dynamic;

	/**
	 * The current voice list, used for vocal replacement.
	 */
	var voiceList:Array<String>;

	/**
	 * The current supported game version.
	 * NOTE: Only change this if there's breaking changes that
	 * make it not function on older versions!!
	 */
	var supportedVersionRule:String = ">=0.5.2 <=0.5.3";

	/**
	 * currentCachedTextures gets cleared everytime we load into a song.
	 * It'd be annoying to have to re-cache everything everytime we exit, so we
	 * keep track of JSON characters in a separate map instead.
	 */
	var cachedJSONSparrows:StringMap<String> = new StringMap();

	/**
	 * A map containing every character.
	 */
	var characterMap:StringMap<String, Array<String, String>> = new StringMap();

	/**
	 * Cache for JSON character data.
	 */
	var jsonCharacterCache:StringMap<String, Array<Dynamic, Dynamic>> = new StringMap();

	/**
	 * A map of all the locked characters.
	 */
	var lockedCharMap:StringMap<String> = new StringMap();

	/**
	 * An array of unlock animations we've seen already.
	 * This ensures the unlock animation only plays once per save file.
	 */
	var seenUnlocks:Array<String> = [];

	/**
	 * Some janky shit for passing the BPM through CharacterMenu don't worry about it.
	 */
	var freeplayBPM:Float = null;

	/**
	 * The original character ID from the chart.
	 */
	var ogCharID:String = null;

	var charText:AtlasText;
	var charSelectIcon:FunkinSprite;

	function new() {
		super("CharacterHandler");

		// The FIRST thing we check is the game version.
		// We use `lime.app.Application` instead of `Constants.VERSION` because the latter
		// has added suffixes depending on if the game is a debug build or not.
		if (!VersionUtil.validateVersionStr(Application.current.meta.get('version'), supportedVersionRule)) {
			PolymodErrorHandler.showAlert("Funker Selector Error",
				"Funker Selector is not supported on Friday Night Funkin' v" + Application.current.meta.get('version') + ".");
			this.active = false;
			return;
		}

		// Initialize the save data.
		initializeCharIDs();
		initializeFunkerSettings();

		// Parses and caches JSON character data.
		loadJSONDataCache();
	}

	/**
	 * Retrieves Character IDs from the save data.
	 * @return The saved character IDs as a dynamic object.
	 */
	function initializeCharIDs():Dynamic {
		var defaultCharacterIDs:Dynamic = {
			bf: 'default',
			gf: 'default',
			dad: 'default'
		};

		if (Save.instance.modOptions.get("FunkerSelector") == null) {
			Save.instance.modOptions.set("FunkerSelector", defaultCharacterIDs);
			Save.instance.flush();
			characterIDs = defaultCharacterIDs;

			trace('[Funker Selector] Successfully created save data:\n\nBoyfriend: '
				+ characterIDs.bf
				+ '\nGirlfriend: '
				+ characterIDs.gf
				+ '\nOpponent: '
				+ characterIDs.dad);
			trace('[Funker Selector] Successfully created save data:\n\nBoyfriend: '
				+ characterIDs.bf
				+ '\nGirlfriend: '
				+ characterIDs.gf
				+ '\nOpponent: '
				+ characterIDs.dad);
		} else {
			characterIDs = Save.instance.modOptions.get("FunkerSelector");
			trace('[Funker Selector] Successfully retrieved save data:\n\nBoyfriend: '
				+ characterIDs.bf
				+ '\nGirlfriend: '
				+ characterIDs.gf
				+ '\nOpponent: '
				+ characterIDs.dad);
		}

		return characterIDs;
	}

	/**
	 * Retrieves the preferences from the save data.
	 * @return The saved preferences as a dynamic object.
	 */
	function initializeFunkerSettings():Dynamic {
		var defaultSettings:Dynamic = {
			potatoMode: false,
			preloadSprites: true,
			preferredSFX: "funkin"
		};

		if (Save.instance.modOptions.get("FunkerSelectorSettings") == null) {
			Save.instance.modOptions.set("FunkerSelectorSettings", defaultSettings);
			Save.instance.flush();
			funkerSettings = defaultSettings;

			trace('[Funker Selector] Successfully created save data:\n\nSimplify UI: '
				+ funkerSettings.potatoMode
				+ '\nPreload Sprites: '
				+ funkerSettings.preloadSprites
				+ '\nPreferred SFX: '
				+ funkerSettings.preferredSFX);
		} else {
			funkerSettings = Save.instance.modOptions.get("FunkerSelectorSettings");

			// We check if there's any missing settings in the save file
			// and add them if needed.
			for (key in ReflectUtil.getAnonymousFieldsOf(defaultSettings)) {
				if (!ReflectUtil.hasAnonymousField(funkerSettings, key)) {
					trace('[Funker Selector] Missing setting ' + key + '! Applying the default value.');
					funkerSettings[key] = defaultSettings[key];
				}
			}

			Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
			Save.instance.flush();

			trace('[Funker Selector] Successfully retrieved save data:\n\nSimplify UI: '
				+ funkerSettings.potatoMode
				+ '\nPreload Sprites: '
				+ funkerSettings.preloadSprites
				+ '\nPreferred SFX: '
				+ funkerSettings.preferredSFX);
		}

		if (Save.instance.modOptions.get("FunkerSelector-SeenChars") == null) {
			Save.instance.modOptions.set("FunkerSelector-SeenChars", seenUnlocks);
			Save.instance.flush();
		} else {
			seenUnlocks = Save.instance.modOptions.get("FunkerSelector-SeenChars");
		}

		trace("SEEN UNLOCK ANIMATIONS: " + seenUnlocks);

		return funkerSettings;
	}

	function onCreate(event) {
		super.onCreate(event);

		// Cache the sprites for JSON characters.
		// This is only done once.
		if (funkerSettings.preloadSprites && !funkerSettings.potatoMode)
			cacheJSONSparrows();
	}

	function onUpdate(event) {
		super.onUpdate(event);
		if (FlxG.state.subState is FreeplayState) {
			// Open the CharacterMenu substate.
			// We need to make a new one everytime since it gets destroyed when it's closed.
			if (FlxG.keys.justPressed.G && charText.visible && !FlxG.state.subState.busy) {
				freeplayBPM = getBPM((FlxG.state.subState));
				var charSelect:FlxSubState = ScriptedMusicBeatSubState.init("CharacterSelectSubState");
				charSelect.camera = FlxG.state.subState.funnyCam;
				FlxG.state.subState.persistentUpdate = false;
				FlxG.state.subState.openSubState(charSelect);
			}
		}
	}

	/**
	 * Gets the BPM of the currently selected song in Freeplay.
	 * @param freeplay The Freeplay SubState to use as a dynamic object.
	 * @return The BPM.
	 */
	function getBPM(freeplay:Dynamic):Float {
		var daSongCapsule = freeplay.grpCapsules.members[freeplay.curSelected];
		var songBPM = daSongCapsule?.freeplayData?.songStartingBpm;
		if (songBPM == null)
			songBPM = 120;

		return songBPM;
	}

	/**
	 * Stuff for Results and Freeplay.
	 */
	function onSubStateOpenEnd(event) {
		super.onSubStateOpenEnd(event);
		var state = event.targetState;
		// Set up the Character Select button.
		if (state is FreeplayState) {
			charSelectIcon = FunkinSprite.createSparrow(10, 120, 'freeplay/char_select');
			charSelectIcon.animation.addByPrefix('intro', 'icon enter', 24, false);
			charSelectIcon.animation.addByPrefix('idle', 'idle', 24, true);
			charSelectIcon.zIndex = 1000;
			charSelectIcon.scale.set(0.7, 0.7);
			charSelectIcon.camera = state.funnyCam;
			charSelectIcon.visible = false;

			charText = new AtlasText(170, 270, 'G', 'bold');
			charText.visible = false;
			charText.zIndex = 1001;
			charText.camera = state.funnyCam;

			state.add(charSelectIcon);
			state.add(charText);

			state.dj.onIntroDone.add(function() {
				charSelectIcon.visible = true;
				charSelectIcon.animation.play('intro');
				charSelectIcon.animation.finishCallback = function(_) {
					charSelectIcon.animation.play('idle');
					charText.visible = true;
					if (charSelectIcon.animation.curAnim.name == 'idle')
						charSelectIcon.offset.set(-15, 14);
					else
						charSelectIcon.offset.set();
				};
			});
		}

		// Results screen bullshit.
		if (state is ResultState) {
			// More playable character shit
			// The results anim will still play, it's just Freeplay won't bug out when we do this.
			// If the original player is part of a Playable Character, we don't do this.
			if (PlayState.instance.currentStage.getBoyfriend()?.characterId == characterIDs.bf) {
				PlayState.instance.currentChart.characters.player = ogCharID;
				state.playerCharacterId = null;
				if (PlayerRegistry.instance.isCharacterOwned(ogCharID))
					state.playerCharacterId = PlayerRegistry.instance.getCharacterOwnerId(ogCharID);
			}
		}
	}

	/**
	 * Resetting Game Over and Pause Menu suffixes.
	 * We put this in `onStateChangeBegin();` instead of `onStateChangeEnd();`, otherwise,
	 * scripted characters will have their suffixes overridden!
	 */
	override function onStateChangeBegin(event) {
		super.onStateChangeBegin(event);
		if (event.targetState is PlayState) {
			PauseSubState.musicSuffix = '';
			GameOverSubState.musicSuffix = '';
			GameOverSubState.blueBallSuffix = '';

			// Reload the song entries since `PlayState.instance.currentChart.characters.player`
			// doesn't reset properly when we change it.
			// TODO: Find the root cause and fix this in Funkin's source code.
			SongRegistry.instance.loadEntries();
		}
	}

	override function onStateChangeEnd(event) {
		super.onStateChangeEnd(event);

		// Options Menu stuff
		if (event.targetState is OptionsState) {
			var prefs = event.targetState.pages.get("preferences");
			if (prefs != null) {
				prefs.add(prefs.items.createItem(120, 120 * prefs.items.length + 30, "-- FUNKER SELECTOR --", "bold", () -> {})).fireInstantly = true;

				prefs.createPrefItemCheckbox("Simplify UI", "Simplifies the UI and disables character sprite caching.", (value) -> {
					funkerSettings.potatoMode = value;
					Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
					Save.instance.flush();
				}, funkerSettings.potatoMode);

				prefs.createPrefItemCheckbox("Preload Sprites",
					"Wether to preload the character sprites or not. Will cause lag on the Character Selection Menu if off!", (value) -> {
						funkerSettings.preloadSprites = value;
						Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
						Save.instance.flush();
						if (value) {
							cacheJSONSparrows();
						} else {
							// Remove the JSON Characters from memory when the user disables the option.
							for (jsonChar in cachedJSONSparrows.keys()) {
								var char = cachedJSONSparrows.get(jsonChar);
								if (char == null)
									continue;
								FlxG.bitmap.remove(char);
								char.persist = false;
								char.destroyOnNoUse = true;
								char.destroy();
								cachedJSONSparrows.remove(jsonChar);
							}
							MemoryUtil.collect(true);
						}
					}, funkerSettings.preloadSprites);

				prefs.createPrefItemEnum('Menu SFX', 'Change the SFX used for the Character Menu.',
					["funkin" => "Funkin' Main Menu", "charSelect" => "Funkin' Character Select"], (value) -> {
						funkerSettings.preferredSFX = value;
						Save.instance.modOptions.set("FunkerSelectorSettings", funkerSettings);
						Save.instance.flush();
						if (value == "charSelect") {
							FunkinSound.playOnce(Paths.sound('CS_confirm'));
						} else {
							FunkinSound.playOnce(Paths.sound('confirmMenu'));
						}
					}, funkerSettings.preferredSFX);

				prefs.add(prefs.items.createItem(120, 120 * prefs.items.length, "-------------------", "bold", () -> {})).fireInstantly = true;
			}
		}
	}

	/**
	 * Parse a Funker Selector JSON file and return the data.
	 * @param characterID The character ID to use.
	 * @return The JSON data as a Json object.
	 */
	function parseJSONData(characterID:String = 'default'):Dynamic {
		var filePath = Paths.json('funkerSelector/' + characterID);

		if (Assets.exists(filePath)) {
			var result = SerializerUtil.fromJSON(Assets.getText(filePath));
			if (result == null) trace("[Funker Selector] Something went wrong when parsing " + Assets.getPath(filePath) + "! Returning null...");
			return result;
		}

		return null;
	}

	/**
	 * Wether or not the character should be shown.
	 * @param characterID The character ID we're using.
	 * @param unlockType The method we're using to determine if this character is unlocked.
	 * @return Bool
	 * 
	 * Unlock Methods:
	 * - playableCharacter: Checks if the associated playable character is unlocked.
	 * - song: Checks if the song has been beaten on the specified difficulty list.
	 * - storyWeek: Checks if the week has been beaten on the specified difficulty list.
	 */
	function isCharacterUnlocked(characterID:String, unlockMethod:Dynamic):Bool {
		switch (unlockMethod.type) {
			case 'playableCharacter':
				if (PlayerRegistry.instance.isCharacterOwned(characterID)) {
					var ownerID:String = PlayerRegistry.instance.getCharacterOwnerId(characterID);
					var playableCharacter:PlayableCharacter = PlayerRegistry.instance.fetchEntry(ownerID);
					return playableCharacter != null && playableCharacter.isUnlocked();
				}
			case "song":
				return Save.instance.hasBeatenSong(unlockMethod.songID, unlockMethod.difficultyList);
			case 'storyWeek':
				return Save.instance.hasBeatenLevel(unlockMethod.levelID, unlockMethod.difficultyList);
			default:
				return false;
		}
	}

	/**
	 * We preload the sprites for the JSON characters
	 * when the Module is created in order to reduce lag when
	 * they're shown in the Character Selection screen.
	 *
	 * If "Simplify UI" is enabled, the sprites are not
	 * cached as they won't show up in the menu.
	 */
	function cacheJSONSparrows():Void {
		var funkerJSONs:Array<String> = DataAssets.listDataFilesInPath('funkerSelector/');
		for (funker in funkerJSONs) {
			trace('[Funker Selector] Fetching JSON data for ' + funker);

			var funkerData:Dynamic = jsonCharacterCache.get(funker);
			var data:Dynamic = funkerData[0];
			var charData:Dynamic = funkerData[1];

			if (data == null)
				continue;

			if (data.characterID == null) {
				trace('[ERROR] Failed to cache sprite for ' + Assets.getPath(Paths.json('funkerSelector/' + funker))
					+ '! The "characterID" field does not exist.');
				continue;
			}

			if (!charJSONCheck(data.characterID)) {
				trace('[ERROR] Failed to cache sprite! The Character ID (' + data.characterID + ') is invalid.');
				continue;
			}

			switch (charData.renderType) {
				case 'multisparrow':
					for (anim in charData.animations) {
						if (anim.assetPath != null)
							cacheSprite(Paths.image(anim.assetPath));
					}
				case 'animateatlas':
					cacheSprite(Paths.image(charData.assetPath + '/spritemap1'));
				case 'sparrow':
					cacheSprite(Paths.image(charData.assetPath));
				default:
					cacheSprite(Paths.image(charData.assetPath));
			}
		}
	}

	/**
	 * Initializing and caching character data for use in the `CharacterMenu` SubState itself.
	 * 
	 * Characters use a JSON file and are loaded from `data/funkerSelector/` and
	 * then parsed, they can specify Game Over music, Blue Ball, 
	 * and Pause Menu music suffixes.
	 * If no character type is specified in the JSON, it is pushed
	 * to the Boyfriend character list. 
	 * If no character ID exists in the file (or the character ID is invalid), the character will be skipped.
	 */
	function loadJSONDataCache():Void {
		var funkerJSONs:Array<String> = DataAssets.listDataFilesInPath('funkerSelector/');
		var data:Dynamic = null;

		for (funker in funkerJSONs) {
			trace('[Funker Selector] Loading JSON data for ' + funker);

			data = parseJSONData(funker);

			// If the data is null (Caused by an issue when parsing the json file)
			if (data == null) {
				PolymodErrorHandler.showAlert("Funker Selector JSON Parsing Error", "Something went wrong when parsing the following JSON file:\n\n" + Assets.getPath(Paths.json('funkerSelector/' + funker)) + "\n\nPlease check the JSON file for any syntax errors.");
				continue;
			}

			// If the "characterID" field was not found.
			if (data.characterID == null) {
				PolymodErrorHandler.showAlert('Funker Selector JSON Parsing Error',
					'In "' + Assets.getPath(Paths.json('funkerSelector/' + funker)) +
					'":\n\nThe "characterID" field was not found. This character will be skipped to prevent any issues.');
				continue;
			}

			// If the Character ID is "default"
			if (data.characterID == 'default') {
				PolymodErrorHandler.showAlert('Funker Selector JSON Parsing Error',
					'In "'
					+ Assets.getPath(Paths.json('funkerSelector/' + funker))
					+ '":\n\nThe specified Character ID ('
					+ data.characterID
					+
					') is set to "default"! Please change it, since it will conflict with the "default" character object in the menu.\nThis character will be skipped to prevent any issues.');
				continue;
			}

			// If the specified Character ID does not exist in data/characters/
			if (!charJSONCheck(data.characterID)) {
				PolymodErrorHandler.showAlert('Funker Selector JSON Parsing Error',
					'In "'
					+ Assets.getPath(Paths.json('funkerSelector/' + funker))
					+ '":\n\nThe specified Character ID ('
					+ data.characterID
					+ ') is invalid. This character will be skipped to prevent any issues.');
				continue;
			}

			if (data.mustUnlock && data.unlockMethod != null) {
				if (!isCharacterUnlocked(data.characterID, data.unlockMethod)) {
					trace('[Funker Selector] Character ID ' + data.characterID + ' is locked!');
					lockedCharMap.set(data.characterID, data);
				} else {
					if (seenUnlocks.indexOf(data.characterID) == -1) {
						trace('[Funker Selector] Character ID ' + data.characterID + ' was unlocked!');
						lockedCharMap.set(data.characterID, data);
					}
				}
			}

			// Default to bf if the character type doesn't exist.
			if (data.characterType == null)
				data.characterType = 'bf';

			// Caching the character data.
			charData = CharacterDataParser.parseCharacterData(data.characterID);

			// NOTE: `jsonCharacterCache` and `characterMap` serve 2 different purposes.
			jsonCharacterCache.set(funker, [data, charData]);
			characterMap.set(data.characterID, [funker, data.characterType]);
		}
	}

	/**
	 * This is taken from Psych Engine, with some modifications.
	 * This is a lot more Memory-efficient compared to using FunkinSprite's cacheSparrow function!
	 *
	 * @param path The file path.
	 */
	function cacheSprite(path:String) {
		if (cachedJSONSparrows.exists(path))
			return;
		trace('[Funker Selector] Caching sprite ' + path);
		var bitmap:BitmapData = Assets.getBitmapData(path);
		if (bitmap != null) {
			var texture:RectangleTexture = FlxG.stage.context3D.createRectangleTexture(bitmap.width, bitmap.height, "bgra", true);
			texture.uploadFromBitmapData(bitmap);
			bitmap.image.data = null;
			bitmap.dispose();
			bitmap.disposeImage();
			bitmap = BitmapData.fromTexture(texture);
			var graphic:FlxGraphic = FlxGraphic.fromBitmapData(bitmap, false, path);
			graphic.persist = true;
			cachedJSONSparrows.set(path);
			trace('[Funker Selector] Successfully cached graphic: ' + path);
		} else {
			trace('[ERROR] Failed to cache graphic: ' + path);
		}
	}

	/**
	 * Reset the voiceList, swap out the characters, and
	 * replace vocals if any are found.
	 */
	override function onCountdownStart(event) {
		super.onCountdownStart(event);
		if (PlayState.instance == null
			|| PlayState.instance.currentStage == null
			|| PlayStatePlaylist.isStoryMode
			|| PlayState.instance.isMinimalMode
			|| PlayState.instance.isChartingMode)
			return;

		// Setting voiceList to null in order to reset the voices,
		// since module variables persist between state changes.
		voiceList = [null, null];

		// Saving the original character ID.
		ogCharID = PlayState.instance.currentChart.characters.player;

		// Replace and swap out the characters.
		replaceChar(characterIDs.bf, CharacterType.BF);
		replaceChar(characterIDs.gf, CharacterType.GF);
		replaceChar(characterIDs.dad, CharacterType.DAD);
		PlayState.instance.currentStage.refresh();

		// If at least ONE of them was changed (means a vocal file was found), replace the vocals.
		if (voiceList[0] != null || voiceList[1] != null) {
			trace('[Funker Selector] Voice List:\n\nPlayer: ' + voiceList[0] + '\nOpponent: ' + voiceList[1]);
			PlayState.instance.vocals.stop();
			PlayState.instance.vocals = replaceVocals(voiceList);
		}
	}

	/**
	 * Changing `player` in `currentChart` to trick the Results Screen
	 * into loading the Results Screen animations for the currently
	 * selected character if they exist.
	 */
	function onSongEnd() {
		if (PlayerRegistry.instance.isCharacterOwned(characterIDs.bf)
			&& PlayState.instance.currentStage.getBoyfriend()?.characterId == characterIDs.bf) {
			PlayState.instance.currentChart.characters.player = characterIDs.bf;
		}
	}

	/**
	 * The actual logic for character replacement.
	 * For Boyfriend and Dad, it checks to see if a vocal
	 * file of the current song exists for the specified character,
	 * and replaces the original character's vocals with that.
	 *
	 * @param characterID The character ID to change into.
	 * @param characterType The character type we're using.
	 * 
	 */
	function replaceChar(characterID:String = 'bf', characterType:CharacterType = null):Void {
		var characterInfo:Dynamic = characterMap.get(characterID);
		var ownerJSONname:String = characterInfo != null ? characterInfo[0] : null;
		var characterData:Dynamic = ownerJSONname != null ? jsonCharacterCache.get(ownerJSONname)[0] : null;
		var oldChar:BaseCharacter = null;
		var variationSuffix:String = PlayState.instance.currentVariation != 'default' ? '-' + PlayState.instance.currentVariation : '';
		// TODO: Allow people to specify their own vocal ID instead of defaulting to the character ID
		var voiceFile:String = Paths.voices(PlayState.instance.currentSong.id, '-' + characterID + variationSuffix);

		if (characterID == 'default')
			return;

		trace('[Funker Selector] Replacing type ' + characterType + ' with id ' + characterID);

		switch (characterType) {
			case CharacterType.BF:
				oldChar = PlayState.instance.currentStage.getBoyfriend();
				if (Assets.exists(voiceFile)) {
					voiceList[0] = voiceFile;
				}
			case CharacterType.GF:
				oldChar = PlayState.instance.currentStage.getGirlfriend();
			case CharacterType.DAD:
				oldChar = PlayState.instance.currentStage.getDad();
				if (Assets.exists(voiceFile)) {
					voiceList[1] = voiceFile;
				}
			default:
				trace('How did you get here?');
				return;
		}

		// Return if the target character does not exist.
		if (oldChar == null)
			return;

		// TODO: Add visual indicator for variations.
		if (characterData?.characterVariations != null) {
			for (variation in characterData.characterVariations) {
				if (variation.songID == null || variation.characterID == null) {
					continue;
				}

				var songMatch:Bool = false;
				var variationMatch:Bool = false;

				if (variation.songID is Array) {
					songMatch = (variation.songID.indexOf(PlayState.instance.currentSong.id) != -1);
				} else if (variation.songID is String) {
					songMatch = (variation.songID == PlayState.instance.currentSong.id);
				}

				if (variation.songVariation != null) {
					if (variation.songVariation is Array) {
						variationMatch = (variation.songVariation.indexOf(PlayState.instance.currentVariation) != -1);
					} else if (variation.songVariation is String) {
						variationMatch = (variation.songVariation == PlayState.instance.currentVariation);
					}
				} else {
					variationMatch = true; // Assume true if songVariation does not exist.
				}

				if (songMatch && variationMatch) {
					characterData = characterMap.get(variation.characterID) != null ? jsonCharacterCache.get(characterMap.get(variation.characterID)[0])[0] : characterData;

					if (charJSONCheck(variation.characterID)) {
						trace('[Funker Selector] Variation found: ' + variation.characterID);
						characterID = variation.characterID;
					} else {
						PolymodErrorHandler.showAlert('Funker Selector Error',
							'The character variation "' + variation.characterID + '" does not exist. The base character ID will be used instead.');
					}
					break;
				}
			}
		}

		// Don't bother replacing the character if both character IDs match.
		if (oldChar.characterId != characterID) {
			var charZIndex:Int = oldChar.zIndex;
			var character = CharacterDataParser.fetchCharacter(characterID);

			if (character != null) {
				oldChar.destroy();
				character.zIndex = charZIndex;
				PlayState.instance.currentStage.addCharacter(character, characterType);
			} else {
				PolymodErrorHandler.showAlert('Funker Selector Error', 'Something went wrong replacing the ' + characterType + ' character. How the fuck???');
			}
		} else {
			trace('[Funker Selector] ID ' + characterID + ' and ID ' + oldChar.characterId + ' match. Not replacing...');
		}

		if (characterData != null && characterType == CharacterType.BF) {
			PauseSubState.musicSuffix = (characterData.pauseMusicSuffix != null
				&& characterData.pauseMusicSuffix != '') ? characterData.pauseMusicSuffix : PauseSubState.musicSuffix;
			GameOverSubState.musicSuffix = (characterData.gameOverMusicSuffix != null
				&& characterData.gameOverMusicSuffix != '') ? characterData.gameOverMusicSuffix : GameOverSubState.musicSuffix;
			GameOverSubState.blueBallSuffix = (characterData.blueBallSuffix != null
				&& characterData.blueBallSuffix != '') ? characterData.blueBallSuffix : GameOverSubState.blueBallSuffix;
		}

		trace('[Funker Selector] Suffixes\n\nPause Music: ' + PauseSubState.musicSuffix + '\nGame Over Music: ' + GameOverSubState.musicSuffix
			+ '\nGame Over SFX: ' + GameOverSubState.blueBallSuffix);
	}

	/**
	 * Copy-pasted from CharacterMenu.
	 */
	function charJSONCheck(string:String):Bool {
		if (Assets.exists(Paths.json('characters/' + string))) {
			var characterFiles = DataAssets.listDataFilesInPath('characters/');
			return characterFiles.indexOf(string) != -1;
		}
		return false;
	}

	/**
	 * Modified version of buildVocals(); to handle vocal replacement.
	 *
	 * @param voiceList The supplied array.
	 */
	function replaceVocals(voiceList:Array<String>):VoicesGroup {
		var currentChart = PlayState.instance.currentChart;
		var result:VoicesGroup = new VoicesGroup();
		var songVoices:Array<String> = currentChart.buildVoiceList();

		if (voiceList[0] != null) {
			result.addPlayerVoice(FunkinSound.load(voiceList[0]));
		} else {
			result.addPlayerVoice(FunkinSound.load(songVoices[0]));
		}

		if (voiceList[1] != null) {
			result.addOpponentVoice(FunkinSound.load(voiceList[1]));
		} else {
			result.addOpponentVoice(FunkinSound.load(songVoices[1]));
		}

		result.playerVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.player);
		result.opponentVoicesOffset = currentChart.offsets.getVocalOffset(currentChart.characters.opponent);

		return result;
	}
}
